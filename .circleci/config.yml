version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.   
    steps:
      - run:
          name: Delete S3 files
          when: on_fail
          command: aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive || true
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            MIGRATIONS=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $MIGRATIONS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end build
          working_directory: frontend/
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: backend/
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          working_directory: frontend/
          command: npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          working_directory: backend/
          command: npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          working_directory: frontend/
          command: npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          working_directory: backend/
          command: npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Save back-end ip to memstash and inventory
          command: |
            BACKEND=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)

              curl -H "Content-Type: text/plain" \
                -H "token: ${MEMSTASH_TOKEN}" \
                --request PUT \
                --data "$BACKEND" \
                https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID:0:7}

              echo $BACKEND >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e6:b7:b9:5a:2a:73:bb:3b:4c:53:b5:06:46:ed:e0:ea"]
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - attach_workspace:
         at: ~/
      - run:
          name: Configure Server
          command: |
            ansible-playbook -v -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - run:
          name: Install AWS CLI
          when: on_fail
          command: | # Adding curl and AWS CLI to ansible runtime so that destroy-environment will work
            apk add --update curl
            pip install awscli
      - destroy-environment      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          working_directory: backend/
          name: Run migrations
          command: |
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env

            npm i
            npm run migrations:revert
            npm run migrations > migrations.out
            cat migrations.out
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" backend/migrations.out; then
              curl -H "Content-Type: text/plain" \
                -H "token: ${MEMSTASH_TOKEN}" \
                --request PUT \
                --data "Successful Migration" \
                https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              exit 1
            fi
      - run:
          name: Install AWS CLI
          when: on_fail
          command: | # Adding AWS CLI to ansible runtime so that destroy-environment will work
            pip install awscli
      - destroy-environment
      - revert-migrations     

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              apk add --update nodejs npm curl
              pip install awscli
      - run:
          name: Deploy frontend objects
          working_directory: frontend/
          command: |
            BACKEND_IP=$(curl -H "Content-Type: text/plain" \
                -H "token: ${MEMSTASH_TOKEN}" \
                --request GET \
                https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID:0:7})
            
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm i
            npm run build
            aws s3 sync dist/ s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - revert-migrations       
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e6:b7:b9:5a:2a:73:bb:3b:4c:53:b5:06:46:ed:e0:ea"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm tar gzip curl
            pip install awscli
      - attach_workspace:
         at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend/
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            cat .env

            npm i
            npm run build
            cd ..
            mkdir .circleci/ansible/roles/deploy/files/
            tar -czf .circleci/ansible/roles/deploy/files/backend.tgz backend/
            ansible-playbook -v -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment
      - revert-migrations 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-2.amazonaws.com/ | grep "Welcome"
              then
                return 0  
                echo "Smoke Test Success"
              else
                return 1
              fi
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "Content-Type: text/plain" \
                -H "token: ${MEMSTASH_TOKEN}" \
                --request GET \
                https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID:0:7})
            
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"

            sleep 60
            curl $API_URL
      - run:
          name: Install AWS CLI
          when: on_fail
          command: | # Adding AWS CLI to ansible runtime so that destroy-environment will work
            pip install awscli
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Get old CloudFront Workflow ID
          command: |
              WORKFLOWID=$(aws cloudformation list-exports \
                --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate \
                --output text)

              echo $WORKFLOWID >> ~/old_workflow.txt
              cat ~/old_workflow.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - old_workflow.txt
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(cat ~/old_workflow.txt)
            echo Old Workflow ID: "$OldWorkflowID"

            export STACKS=($(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE \
              --no-paginate \
              --output text))

            # Check for current workflow
            if [ "$OldWorkflowID" != "${CIRCLE_WORKFLOW_ID:0:7}" ]
            then
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm s3://udapeople-${OldWorkflowID} --recursive || true
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" || true
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" || true
              fi
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]